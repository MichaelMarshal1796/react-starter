AWSTemplateFormatVersion: "2010-09-09"
Description: "create frontend pipeline"
Resources:
  #start policy creation
  AWSCodePipelineServicePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-react-frontEnd"
      Path: "/service-role/"
      PolicyDocument: |
        {
            "Statement": [
                {
                    "Action": [
                        "iam:PassRole"
                    ],
                    "Resource": "*",
                    "Effect": "Allow",
                    "Condition": {
                        "StringEqualsIfExists": {
                            "iam:PassedToService": [
                                "cloudformation.amazonaws.com",
                                "elasticbeanstalk.amazonaws.com",
                                "ec2.amazonaws.com",
                                "ecs-tasks.amazonaws.com"
                            ]
                        }
                    }
                },
                {
                    "Action": [
                        "codecommit:CancelUploadArchive",
                        "codecommit:GetBranch",
                        "codecommit:GetCommit",
                        "codecommit:GetUploadArchiveStatus",
                        "codecommit:UploadArchive"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codedeploy:CreateDeployment",
                        "codedeploy:GetApplication",
                        "codedeploy:GetApplicationRevision",
                        "codedeploy:GetDeployment",
                        "codedeploy:GetDeploymentConfig",
                        "codedeploy:RegisterApplicationRevision"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codestar-connections:UseConnection"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "elasticbeanstalk:*",
                        "ec2:*",
                        "elasticloadbalancing:*",
                        "autoscaling:*",
                        "cloudwatch:*",
                        "s3:*",
                        "sns:*",
                        "cloudformation:*",
                        "rds:*",
                        "sqs:*",
                        "ecs:*"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "lambda:InvokeFunction",
                        "lambda:ListFunctions"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "opsworks:CreateDeployment",
                        "opsworks:DescribeApps",
                        "opsworks:DescribeCommands",
                        "opsworks:DescribeDeployments",
                        "opsworks:DescribeInstances",
                        "opsworks:DescribeStacks",
                        "opsworks:UpdateApp",
                        "opsworks:UpdateStack"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "cloudformation:CreateStack",
                        "cloudformation:DeleteStack",
                        "cloudformation:DescribeStacks",
                        "cloudformation:UpdateStack",
                        "cloudformation:CreateChangeSet",
                        "cloudformation:DeleteChangeSet",
                        "cloudformation:DescribeChangeSet",
                        "cloudformation:ExecuteChangeSet",
                        "cloudformation:SetStackPolicy",
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codebuild:BatchGetBuilds",
                        "codebuild:StartBuild"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "devicefarm:ListProjects",
                        "devicefarm:ListDevicePools",
                        "devicefarm:GetRun",
                        "devicefarm:GetUpload",
                        "devicefarm:CreateUpload",
                        "devicefarm:ScheduleRun"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "servicecatalog:ListProvisioningArtifacts",
                        "servicecatalog:CreateProvisioningArtifact",
                        "servicecatalog:DescribeProvisioningArtifact",
                        "servicecatalog:DeleteProvisioningArtifact",
                        "servicecatalog:UpdateProduct"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ecr:DescribeImages"
                    ],
                    "Resource": "*"
                }
            ],
            "Version": "2012-10-17"
        }

  CodeBuildCloudWatchLogsFrontend:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "CodeBuildCloudWatchLogsPolicy-react-frontEnd-${AWS::Region}"
      Path: "/service-role/"
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": [
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:react-frontEnd",
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:react-frontEnd:*"
                    ],
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ]
                }
            ]
        }

  CodeBuildBaseFrontend:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "CodeBuildBasePolicy-react-frontEnd-${AWS::Region}"
      Path: "/service-role/"
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": [
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/react-frontEnd",
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/react-frontEnd:*"
                    ],
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Resource": [
                        "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                    ],
                    "Action": [
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:GetObjectVersion",
                        "s3:GetBucketAcl",
                        "s3:GetBucketLocation"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "codebuild:CreateReportGroup",
                        "codebuild:CreateReport",
                        "codebuild:UpdateReport",
                        "codebuild:BatchPutTestCases"
                    ],
                    "Resource": [
                        "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/react-frontEnd-*"
                    ]
                }
            ]
        }

  #end policy creation

  #start role creation

  # if we need to create some resource after created another one we can use DependsOn key
  # and need to set dependent resource name

  AWSCodePipelineServiceRole:
    Type: "AWS::IAM::Role"
    DependsOn:
      - AWSCodePipelineServicePolicy
    Properties:
      Path: "/service-role/"
      RoleName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-react-frontEnd"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref 'AWSCodePipelineServicePolicy'

  CodebuildFrontendRole:
    Type: "AWS::IAM::Role"
    DependsOn:
      - CodeBuildCloudWatchLogsFrontend
      - CodeBuildBaseFrontend
    Properties:
      Path: "/service-role/"
      RoleName: !Sub "codebuild-react-frontEnd-service-${AWS::Region}-role"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
        - !Ref "CodeBuildCloudWatchLogsFrontend"
        - !Ref "CodeBuildBaseFrontend"

  #end role creation

  #start codeBuild creation

  # need to set ServiceRole correctly, refer role that created to codeBuild service
  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    DependsOn:
      - CodebuildFrontendRole
    Properties:
      Name: "react-frontEnd"
      Source:
        InsecureSsl: false
        Type: "CODEPIPELINE"
      Artifacts:
        EncryptionDisabled: false
        Name: "react-frontEnd"
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache:
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:5.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: false
        Type: "LINUX_CONTAINER"
      ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/codebuild-react-frontEnd-service-${AWS::Region}-role"
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
      BadgeEnabled: false
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
          GroupName: "react-frontEnd"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false

  #end codeBuild creation
  CodeBuildSonar:
      Type: "AWS::CodeBuild::Project"
      DependsOn:
        - CodebuildFrontendRole
      Properties:
        Name: "react-sonar"
        Source:
          BuildSpec: "devOps/sonar.yml"
          InsecureSsl: false
          Type: "CODEPIPELINE"
        Artifacts:
          EncryptionDisabled: false
          Name: "react-sonar"
          Packaging: "NONE"
          Type: "CODEPIPELINE"
        Cache:
          Type: "NO_CACHE"
        Environment:
          ComputeType: "BUILD_GENERAL1_SMALL"
          Image: "aws/codebuild/standard:5.0"
          ImagePullCredentialsType: "CODEBUILD"
          PrivilegedMode: false
          Type: "LINUX_CONTAINER"
        ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/codebuild-react-frontEnd-service-${AWS::Region}-role"
        TimeoutInMinutes: 60
        QueuedTimeoutInMinutes: 480
        EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
        BadgeEnabled: false
        LogsConfig:
          CloudWatchLogs:
            Status: "ENABLED"
            GroupName: "react-frontEnd"
          S3Logs:
            Status: "DISABLED"
            EncryptionDisabled: false

  #end codeBuild creation

  #start s3 bucket creation

  #this is for upload pipeline stack
  #we can use any name
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "codepipeline-${AWS::Region}-fe-v1-15052022"
  #end s3 bucket creation

  #start pipeline creation
  # Generate token like this:
  # GH Link: https://github.com/settings/tokens
  CodePipelinePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    DependsOn:
      - AWSCodePipelineServiceRole
      - S3Bucket
    Properties:
      Name: "react-frontEnd"
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/AWSCodePipelineServiceRole-${AWS::Region}-react-frontEnd"
      ArtifactStore:
        Location: !Ref "S3Bucket"
        Type: "S3"
      Stages:
        -
          Name: "Source"
          Actions:
            -
              Name: "Source"
              ActionTypeId:
                Category: "Source"
                Owner: "ThirdParty"
                Provider: "GitHub"
                Version: "1"
              Configuration:
                Branch: "master"
                OAuthToken: "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"
                Owner: "MichaelMarshal1796"
                PollForSourceChanges: "false"
                Repo: "react-starter"
              OutputArtifacts:
                -
                  Name: "SourceArtifact"
              Region: "eu-west-2"
              Namespace: "SourceVariables"
              RunOrder: 1
        -
          Name: "ManualApproval"
          Actions:
            -
              Name: "ManualApproval"
              ActionTypeId:
                Category: "Approval"
                Owner: "AWS"
                Provider: "Manual"
                Version: "1"
              RunOrder: 1

        -
          Name: "Sonar"
          Actions:
            -
              Name: "react-sonar"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
                Configuration:
                ProjectName: "react-sonar"
                InputArtifacts:
                  -
                    Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "react-sonar"
                    RunOrder: 1
        -
          Name: "Build"
          Actions:
            -
              Name: "Build"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: "react-frontEnd"
              InputArtifacts:
                -
                  Name: "SourceArtifact"
              OutputArtifacts:
                -
                  Name: "BuildArtifact"
              Region: "eu-west-2"
              Namespace: "BuildVariables"
              RunOrder: 1
  #end pipeline creation




